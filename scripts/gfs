#!/usr/bin/ruby -w
require 'optparse'
require 'net/http'

options = {}
$base_brick_path = "/home/gfs/"

def download_qabuild(version)
        tarball = "glusterfs-"+version+".tar.gz"
        print "Downloading tarball" + tarball
        Net::HTTP.start("bits.gluster.com") do |http|
                resp = http.get("/gluster/glusterfs/src/"+tarball)
                open(tarball, "wb") do |file|
                        file.write(resp.body)
                        print "*"
                end
        end
        puts "Done."
end

def execute(cmd)
	puts cmd
	puts `#{cmd}`
        if $?.to_i != 0
                abort "script execution failed: #{$?}"
        end
end

def get_mount (volname)
        "/mnt/" + volname
end

def get_volname(options)
        "dht" + options[:dhtcount].to_s +
        "repl" + options[:replcount].to_s +
        "stripe" + options[:stripecount].to_s
end

def get_paths(options)
        paths = ""
        brick_count = options[:dhtcount] * options[:replcount] * options[:stripecount]
        for i in 0..(brick_count - 1)
               paths += $base_brick_path + options[:volname] + "_" + i.to_s + " "
        end
        paths
end

def parse_bricks(volinfo)
        paths = []
        hostname = nil
        volinfo.each_line do |line|
                brick_regex = /^Brick\d+: (.*):(.*)/
                hostname ||= line[brick_regex,1]
                path = line[brick_regex,2]
                if path == nil
                        next
                end
                paths.push(path)
        end
        return hostname, paths
end

def get_volume_from_options(options)
        vol = {}
        vol[:replcount] = options[:replcount]
        vol[:stripecount] = options[:stripecount]
        vol[:dhtcount] = options[:dhtcount]
        vol[:volname] = options[:volname]
        vol[:paths] = get_paths(options)
        vol[:mount] = get_mount(options[:volname])
        vol
end

def get_bricks(paths, hostnames)
        bricks=[]
        i = 0
        paths.split().each do |path|
                hostname=hostnames[i % hostnames.size()]
                i = i + 1;
                bricks.push(hostname+':'+path)
        end
        bricks.join(' ')
end

def get_volargs(vol)
        if vol[:replcount] > 1 and vol[:stripecount] > 1
                "replica #{vol[:replcount]} stripe #{vol[:stripecount]}"
        elsif vol[:replcount] > 1
                "replica #{vol[:replcount]}"
        elsif vol[:stripecount] > 1
                "stripe #{vol[:stripecount]}"
        else
                ""
        end
end

def start_glusterd
        if `pgrep glusterd` == ""
                execute("glusterd")
        end
end

def abort_non_root
        if Process.euid != 0
                abort "Only root can execute this script"
        end
end

def abort_on_missing_args(options)
        if options[:command].nil?
                abort "Missing --command"
        elsif options[:command] != 'i' and options[:volname].nil?
                abort "Missing --volname"
        end
end

def init_setup(vol, hostnames)
        if hostnames == nil
                hostnames = []
                hostnames.push(`hostname`.chomp!)
        end
        bricks = get_bricks(vol[:paths], hostnames)
        volargs = get_volargs(vol)
        hostnames.each do |hostname|
                execute("gluster peer probe #{hostname}")
        end
        execute("gluster --mode=script volume create #{vol[:volname]} #{volargs} #{bricks}")
        execute("gluster --mode=script volume start #{vol[:volname]}")
        #execute("gluster --mode=script volume set #{vol[:volname]} client-log-level DEBUG")
        #execute("gluster --mode=script volume set #{vol[:volname]} brick-log-level DEBUG")
        puts `mkdir #{vol[:mount]}`
        execute("mount -t glusterfs #{hostnames[0]}:/#{vol[:volname]} #{vol[:mount]}")
end

def get_volume_from_volinfo(options)
        volinfo = `gluster volume info #{options[:volname]}`
        if $?.to_i != 0
                abort "No Such Volume"
        end
        vol = {}
        vol[:volname] = options[:volname]
        vol[:hostname], vol[:paths] = parse_bricks(volinfo)
        vol[:mount] = get_mount(options[:volname])
        vol
end

def teardown_setup(vol)
        execute("gluster --mode=script volume stop #{vol[:volname]}")
        execute("gluster --mode=script volume delete #{vol[:volname]}")
        execute("rm -rf #{vol[:paths].join(" ")}")
        execute("umount #{vol[:mount]}")
end

def get_rundir()
        "/var/lib/glusterd/"
end

def kill_bricks(brick_ids, vol)
        brickid_list = brick_ids.split(/,/)
        paths = vol[:paths]
        dir = get_rundir()+"vols/"+vol[:volname]+"/run/"
        puts "Dir: #{dir}"
        Dir.chdir(dir) do
                brickid_list.each() do |brickid|
                        pidfile = vol[:hostname] + paths[brickid.to_i].tr('/', '-') + ".pid"
                        File.open(pidfile) do |file|
                                pid = file.gets()
                                execute("kill -9 #{pid}")
                        end
                end
        end
end

options[:replcount] = 1
options[:stripecount] = 1
options[:dhtcount] = 1
optparse = OptionParser.new do|opts|
        opts.banner = 'Usage -c command -v volname [vol-args]'
        opts.on('-c', '--command COMMAND', 'setup/teardown/download/install') do |command|
                if not ['s', 't', 'd', 'i', 'k'].include? command
                        abort "Invalid command"
                end
                options[:command] = command
        end
        opts.on('-v', '--volname VOLNAME', 'volume name') do |volname|
                options[:volname] = volname
        end
        opts.on('-r', '--replica COUNT', '[vol-args] replicate count') do |count|
                if count.to_i > 1
                        options[:replcount] = count.to_i
                else
                        abort "Invalid replica count"
                end
        end
        opts.on('-s', '--stripe COUNT', '[vol-args] stripe count') do |count|
                if count.to_i > 1
                        options[:stripecount] = count.to_i
                else
                        abort "Invalid stripe count"
                end
        end
        opts.on('-k', '--kill BRICK-IDS', 'comma separated brick ids') do |brick_ids|
                options[:brick_ids] = brick_ids
        end
        opts.on('-H', '--hostnames HOSTNAMES', 'hostnames/ips separated by comma') do |hostnames|
                options[:hostnames] = hostnames.split(",")
        end
        opts.on('-B', '--brick-base BRICK-BASE', 'brick base path') do |brick|
                if File.exist? brick
                        $base_brick_path = brick.chomp('/') + "/"
                else
                        abort "Invalid brick base directory " + brick
                end
        end
        #optional argument
        opts.on('-d', '--dht COUNT', '[vol-args] dht count') do |count|
                if count.to_i > 0
                        options[:dhtcount] = count.to_i
                else
                        abort "Invalid dht count"
                end
        end
        opts.on('-h', '--help', 'Display this screen') do
                puts opts
                exit
        end
end

abort_non_root()
optparse.parse!(ARGV)
abort_on_missing_args(options)
start_glusterd()
case options[:command]
when 's'
        vol = get_volume_from_options(options)
        init_setup(vol, options[:hostnames])
when 't'
        vol = get_volume_from_volinfo(options)
        teardown_setup(vol)
when 'd'
        version = options[:volname]
        download_qabuild(version)
when 'i'
        print `./autogen.sh && ./configure && make CFLAGS=\"-DDEBUG -g3\" install -j 32 1>/dev/null`
when 'k'
        vol = get_volume_from_volinfo(options)
        kill_bricks(options[:brick_ids], vol)
else
        abort "Invalid command #{options[:command]}"
end
